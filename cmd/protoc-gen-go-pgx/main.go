package main

import (
	// "log"

	// gengo "google.golang.org/protobuf/cmd/protoc-gen-go/internal_gengo"
	"google.golang.org/protobuf/compiler/protogen"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			// log.Println(f)
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

// generateFile generates a _pgx.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + "_pgx.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	// for _, m := range file.Messages {
	// 	for _, fi := range m.Fields {
	// 		log.Println(fi.Desc.FullName())
	// 	}
	// }
	g.P("// Code generated by protoc-gen-pgx. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.P("import \"database/sql/driver\"")
	g.P()
	g.P("//bla")
	g.P(`
		func (s Timestamp) Value() (driver.Value, error) {
	return s.At.AsTime(), nil
}

// deserialize from DB
func (s *UUID) Scan(value interface{}) error {
	*&s.Item = value.(string)
	return nil
}

// serialize to DB
func (s UUID) Value() (driver.Value, error) {
	return s.String(), nil
}
		`)
	g.P()
}
